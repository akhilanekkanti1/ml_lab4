
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.4     ✔ dplyr   1.0.2
✔ tidyr   1.1.2     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(rio)
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 0.1.1 ──
✔ broom     0.7.1      ✔ recipes   0.1.14
✔ dials     0.0.9      ✔ rsample   0.0.8 
✔ infer     0.5.3      ✔ tune      0.1.1 
✔ modeldata 0.0.2      ✔ workflows 0.2.1 
✔ parsnip   0.1.3      ✔ yardstick 0.0.7 
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
> library(doParallel)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> 
> all_cores <- parallel::detectCores(logical = FALSE)
> 
> cl <- makePSOCKcluster(all_cores)
> registerDoParallel(cl)
> foreach::getDoParWorkers()
[1] 28
> clusterEvalQ(cl, {library(tidymodels)})
[[1]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[2]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[3]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[4]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[5]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[6]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[7]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[8]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[9]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[10]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[11]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[12]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[13]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[14]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[15]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[16]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[17]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[18]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[19]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[20]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[21]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[22]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[23]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[24]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[25]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[26]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[27]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

[[28]]
 [1] "yardstick"  "workflows"  "tune"       "tidyr"      "tibble"    
 [6] "rsample"    "recipes"    "purrr"      "parsnip"    "modeldata" 
[11] "infer"      "ggplot2"    "dplyr"      "dials"      "scales"    
[16] "broom"      "tidymodels" "stats"      "graphics"   "grDevices" 
[21] "utils"      "datasets"   "methods"    "base"      

> 
> full_train <- read_csv("train.csv",
+                        col_types = cols(.default = col_guess(), 
+                         calc_admn_cd = col_character()))  %>% 
+               select(-classification)
> 
> 
> frl <- import("frl.csv",
+               setclass = "tbl_df")  %>% 
+   janitor::clean_names()  %>% 
+   filter(st == "OR")  %>%
+   select(ncessch, lunch_program, student_count)  %>% 
+   mutate(student_count = replace_na(student_count, 0))  %>% 
+   pivot_wider(names_from = lunch_program,
+               values_from = student_count)  %>% 
+   janitor::clean_names()  %>% 
+   mutate(ncessch = as.double(ncessch))
> 
> stu_counts <- import("achievement-gaps-geocoded.csv",
+                      setclass = "tbl_df")  %>% 
+   filter(state == "OR" & year == 1718)  %>% 
+   count(ncessch, wt = n)  %>% 
+   mutate(ncessch = as.double(ncessch))
> 
> staff <- import("staff.csv",
+                 setclass = "tbl_df") %>% 
+   janitor::clean_names() %>%
+   filter(st == "OR") %>%
+   select(ncessch,schid,teachers) %>%
+   mutate(ncessch = as.double(ncessch))
> 
> 
> frl <- left_join(frl, stu_counts)
Joining, by = "ncessch"
> frl1 <- left_join(frl, staff)
Joining, by = "ncessch"
> 
> frl <- frl1 %>% 
+   mutate(fl_prop = free_lunch_qualified/n,
+          rl_prop = reduced_price_lunch_qualified/n) %>%
+   select(ncessch,fl_prop, rl_prop, teachers)
> 
> d <- left_join(full_train, frl) 
Joining, by = "ncessch"
> 
> set.seed(3000)
> (d_split <- initial_split(d)) 
<Analysis/Assess/Total>
<142070/47356/189426>
> 
> d_train <- training(d_split)
> d_test  <- testing(d_split)
> 
> set.seed(3000)
> d_cv <- vfold_cv(d_train, v = 10)
> 
> rec_yoself <- recipe(score ~ .,data = d_train) %>%
+   step_mutate(tst_dt = lubridate::mdy_hms(tst_dt)) %>%
+   update_role(contains("id"), ncessch, new_role = "id vars") %>%
+   step_unknown(all_nominal()) %>% 
+   step_novel(all_nominal()) %>% 
+   step_dummy(all_nominal()) %>% 
+   step_nzv(all_predictors()) %>%
+   #step_mutate(z_rlprop = log(rl_prop),
+   #           z_flprop = log(fl_prop)) %>% 
+   #step_rm(fl_prop, rl_prop) %>% #remove potentially redundant variables
+   step_normalize(rl_prop, fl_prop, teachers) %>%
+   step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars")) %>% #medianimpute only proportion variables 
+   step_interact(terms = ~lat:lon)
> 
> halfbaked <- rec_yoself %>%
+   prep %>%
+   bake(d_train)
> 
> halfbaked
# A tibble: 142,070 x 29
      id attnd_dist_inst… attnd_schl_inst… enrl_grd tst_dt             
   <dbl>            <dbl>            <dbl>    <dbl> <dttm>             
 1     2             2138              785        5 2018-06-05 00:00:00
 2     3             1995             3400        8 2018-05-01 00:00:00
 3     5             2053             1773        8 2018-05-01 00:00:00
 4     7             1964              191        8 2018-05-22 00:00:00
 5    10             1948              184        8 2018-05-25 00:00:00
 6    12             1924               84        8 2018-05-10 00:00:00
 7    13             1947             4396        8 2018-05-09 00:00:00
 8    16             1945              168        8 2018-05-24 00:00:00
 9    17             1966              208        8 2018-05-10 00:00:00
10    18             1965              201        8 2018-05-15 00:00:00
# … with 142,060 more rows, and 24 more variables: partic_dist_inst_id <dbl>,
#   partic_schl_inst_id <dbl>, ncessch <dbl>, lat <dbl>, lon <dbl>,
#   fl_prop <dbl>, rl_prop <dbl>, teachers <dbl>, score <dbl>, gndr_M <dbl>,
#   ethnic_cd_H <dbl>, ethnic_cd_M <dbl>, ethnic_cd_W <dbl>,
#   tst_bnch_X2B <dbl>, tst_bnch_X3B <dbl>, tst_bnch_G4 <dbl>,
#   tst_bnch_G6 <dbl>, tst_bnch_G7 <dbl>, sp_ed_fg_Y <dbl>, tag_ed_fg_Y <dbl>,
#   econ_dsvntg_Y <dbl>, ayp_lep_F <dbl>, ayp_lep_unknown <dbl>,
#   lat_x_lon <dbl>
> 
> set.seed(3000)
> 
> (cores <- parallel::detectCores())
[1] 28
> 
> model_of_forests <- rand_forest() %>%
+   set_engine("ranger",
+              num.threads = cores, #argument from {ranger}
+              importance = "permutation", #argument from {ranger}
+              verbose = TRUE) %>% #argument from {ranger}
+   set_mode("regression")
> 
> werkflo <- workflow() %>%
+   add_recipe(rec_yoself) %>%
+   add_model(model_of_forests)
> 
> set.seed(3000)
> fit_recyoself <- fit_resamples(
+   werkflo,
+   resamples = d_cv,
+   metrics = metric_set(rmse),
+   control = control_resamples(verbose = TRUE, #prints model fitting process
+                               save_pred = TRUE, #saves out of sample predictions
+                               extract = function(x) x))
Warning message:
All models failed in [fit_resamples()]. See the `.notes` column. 
> 
> fit_recyoself %>%
+   collect_metrics()
Error: All of the models failed. See the .notes column.
Backtrace:
     █
  1. └─fit_recyoself %>% collect_metrics()
  2.   ├─base::withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
  3.   └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
  4.     └─base::eval(quote(`_fseq`(`_lhs`)), env, env)
  5.       └─`_fseq`(`_lhs`)
  6.         └─magrittr::freduce(value, `_function_list`)
  7.           ├─base::withVisible(function_list[[k]](value))
  8.           └─function_list[[k]](value)
  9.             └─tune::collect_metrics(.)
 10.               └─tune::estimate_tune_results(x)
Execution halted
